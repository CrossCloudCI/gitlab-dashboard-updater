#!/usr/bin/env ruby

##############################################################################
#
# Usage:
# ./update_client
#
# Example:
#
#   .env ; CI_PROJECT_ID=9 CI_PIPELINE_ID=3359 PIPELINE_RELEASE_TYPE=head CI_JOB_ID=34062 ./update_dashboard
#
##############################################################################

require 'json'
require 'yaml'
require 'faraday'
require 'base64'
require 'securerandom'
require 'jwt'
require 'pp'

cross_cloud_config_url="https://gitlab.cncf.ci/cncf/cross-cloud/raw/ci-stable-v0.1.0/cross-cloud.yml"

##############################################################################

def check_required(var, msg, exitstatus)
  if var.nil? or var.empty?
    puts msg
    exit exitstatus unless exitstatus.nil?
  end
end

# TODO: configuration setup into one section and do all checks
dashboard_api_host_port = nil
source_project_id = nil
source_pipeline_id = nil
pipeline_release_type = nil
source_pipeline_job_id = nil
target_project_name = nil
project_build_pipeline_id = nil

response = Faraday.get cross_cloud_config_url

if response.nil?
  puts "ERROR: failed to retrieve cross-cloud configuration"
  exit 1
else
  cross_cloud_config = YAML.parse(response.body).to_ruby
end

check_required(cross_cloud_config, "ERROR: cross-cloud configuration empty/undefined", 1)


# The child pipeline is set for cross-cloud for projects that are on the app layer eg. CoreDNS
# (cross-cloud.yml app_layer: true)
# Kubernetes will set it to false
# Default: true
child_pipeline=true

## GitLab environment settings
case ENV["CI_PROJECT_NAME"]
when "cross-cloud", "cross-project"
  target_project_name=ENV["TARGET_PROJECT_NAME"]
  project_build_pipeline_id=ENV["PROJECT_BUILD_PIPELINE_ID"]
  check_required(project_build_pipeline_id, "ERROR: target project build pipeline id required", 1)

  if ENV["CI_PROJECT_NAME"] == "cross-cloud"
    app_layer=cross_cloud_config["projects"][target_project_name.downcase]["app_layer"]

    if app_layer.nil? or app_layer != "true"
      # Eg. Kubernetes or CNI
      child_pipeline=false
    end
  end

else
  target_project_name=ENV["CI_PROJECT_NAME"]
end

puts "Project build pipeline id: #{project_build_pipeline_id}"

check_required(target_project_name, "ERROR: target project name required -- not available from CI_PROJECT_NAME nor  TARGET_PROJECT_NAME", 1)


# Set stable and head ref based on project name
stable_ref=cross_cloud_config["projects"][target_project_name.downcase]["stable_ref"]
head_ref=cross_cloud_config["projects"][target_project_name.downcase]["head_ref"]

check_required(stable_ref, "ERROR: stable ref not set for project #{target_project_name}", 1)
check_required(head_ref, "ERROR: head ref not set for project #{target_project_name}", 1)

case ENV["CI_COMMIT_REF_NAME"]
when head_ref
  pipeline_release_type="head"
when stable_ref
  pipeline_release_type="stable"
else
  puts "WARNING: release type unknown ('#{ENV['CI_COMMIT_REF_NAME']}') -- skipping update and exiting"
  pipeline_release_type="unknown"
  exit 0
end

puts "Running update_dashboard for job #{ENV['CI_JOB_NAME']} for release type #{pipeline_release_type}" if ENV['CI_JOB_NAME']

# Set DEFAULT_DASHBOARD_API_HOST_PORT in environment (eg. testdashboard.vu.lk:90292 )

dashboard_api_host_port=nil

# If the Dashboard host and port is set then use that
if not ENV["DASHBOARD_API_HOST_PORT"].nil?
  dashboard_api_host_port=ENV["DASHBOARD_API_HOST_PORT"]

# Else check for users api hosts settings
elsif ENV["DASHBOARD_API_HOST_PORT"].nil? and not ENV["GITLAB_USER_EMAIL"].nil?
  if ENV["BASE_URL"] == "https://gitlab.dev.cncf.ci"
    puts "Checking settings for dev user #{ENV['GITLAB_USER_EMAIL']}"
  end

  begin
    if File.exists?('bin/dev_users.rb')
      require_relative 'dev_users.rb' 
      include CrossCloudCI::DashboardUtils
      dashboard_api_host_port = CrossCloudCI::DashboardUtils.load_users_api_host_port
    end 
  rescue LoadError
    # Ignoring load errors, dev users is optional
    puts "WARNING: faied to load dev users"
  end
end

# Else use the default API host (if it is set)
if dashboard_api_host_port.nil?
  dashboard_api_host_port=ENV["DEFAULT_DASHBOARD_API_HOST_PORT"] unless ENV["DEFAULT_DASHBOARD_API_HOST_PORT"].nil?
end

puts "Using Dashboard API server #{dashboard_api_host_port}"

# CI_PROJECT_ID=9
# CI_PIPELINE_ID=3359
# PIPELINE_RELEASE_TYPE="head"
# CI_JOB_ID="34062"

source_project_id = ENV["CI_PROJECT_ID"]
source_pipeline_id = ENV["CI_PIPELINE_ID"]
pipeline_release_type = ENV["PIPELINE_RELEASE_TYPE"] if pipeline_release_type.nil? and not ENV["PIPELINE_RELEASE_TYPE"].nil?
source_pipeline_job_id = ENV["CI_JOB_ID"]

check_required(dashboard_api_host_port, "Set DASHBOARD_API_HOST_PORT / DEFAULT_DASHBOARD_API_HOST_PORT environment setting", 1)
check_required(source_project_id, "Set CI_PROJECT_ID environment setting", 1)
check_required(source_pipeline_id,"Set CI_PIPELINE_ID environment setting", 1)
check_required(pipeline_release_type, "Set PIPELINE_RELEASE_TYPE environment setting", 1)
check_required(source_pipeline_job_id, "Set CI_JOB_ID environment setting", 1)

dashboard_api_url="http://#{dashboard_api_host_port}/api/source_key_project_monitor"

puts "Project build pipeline id: #{project_build_pipeline_id}"

json_data=<<-EOD
{
  "source_key_project_monitor":
    {
      "source_project_id":"#{source_project_id}",
      "source_pipeline_id":"#{source_pipeline_id}",
      "source_pipeline_job_id":"#{source_pipeline_job_id}",
      "pipeline_release_type":"#{pipeline_release_type}",
      "project_build_pipeline_id":"#{project_build_pipeline_id}",
      "target_project_name":"#{target_project_name}",
      "child_pipeline":"#{child_pipeline}"
    }
}
EOD

puts "json_data: #{json_data}"

def jwt(token)
	JWT.encode(jwt_claims(token), ENV['JWT_KEY'], 'HS256')
end

def jwt_claims(token)
	jwt_issuer=ENV["JWT_ISSUER"]
	{
		iss: jwt_issuer,
	}
end

def jwt_disabled?
  return false if ENV["JWT_DISABLED"].nil?

  if ENV["JWT_DISABLED"].to_i == 1
    return true
  else
    return false
  end
end

cidashboard = Faraday.new(:url => dashboard_api_url)

if jwt_disabled?
  puts "JWT disabled"
	cidashboard.post do |req|
		req.headers['Content-Type'] = 'application/json'
		req.body = json_data
	end
else
  puts "JWT enabled"
  encoded_token = Base64.urlsafe_encode64(SecureRandom.random_bytes(32))
	token = jwt(encoded_token)
	cidashboard.post do |req|
		req.headers['Content-Type'] = 'application/json'
    req.headers['Authorization'] = "Bearer #{token}"
		req.body = json_data
	end
end
