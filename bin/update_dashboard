#!/usr/bin/env ruby

##############################################################################
#
# Usage:
# ./update_client
#
# Example:
#
#   .env ; CI_PROJECT_ID=9 CI_PIPELINE_ID=3359 PIPELINE_RELEASE_TYPE=head CI_JOB_ID=34062 ./update_dashboard
#
##############################################################################

require 'json'
require 'yaml'
require 'faraday'
require 'base64'
require 'securerandom'
require 'jwt'
require 'uri'
require 'pp'

##############################################################################

def check_required(var, msg, exitstatus)
  if var.nil? or var.empty?
    puts msg
    exit exitstatus unless exitstatus.nil?
  end
end

# TODO: configuration setup into one section and do all checks
dashboard_api_host_port = nil
source_project_id = nil
source_pipeline_id = nil
pipeline_release_type = nil
source_pipeline_job_id = nil
target_project_name = nil
project_build_pipeline_id = nil
provision_pipeline_id = nil
kubernetes_release_type = nil

# case ENV["CROSS_CLOUD_CI_ENV"]
# when "cidev"
#   cross_cloud_config_url="https://raw.githubusercontent.com/crosscloudci/cncf-configuration/integration/cross-cloud.yml"
# when "staging"
#   cross_cloud_config_url="https://raw.githubusercontent.com/crosscloudci/cncf-configuration/staging/cross-cloud.yml"
# when "production"
#   cross_cloud_config_url="https://raw.githubusercontent.com/crosscloudci/cncf-configuration/production/cross-cloud.yml"
# # Default
# else
#   cross_cloud_config_url="https://raw.githubusercontent.com/crosscloudci/cncf-configuration/master/cross-cloud.yml"
# end

puts "#103-1"
# If the Dashboard host and port is set then use that
if not ENV["CROSS_CLOUD_YML"].nil?
  cross_cloud_config_url=ENV["CROSS_CLOUD_YML"]
else
  puts "CROSS_CLOUD_YML is not set"
  exit 0
end

response = Faraday.get cross_cloud_config_url

if response.nil?
  puts "ERROR: failed to retrieve cross-cloud configuration"
  exit 1
else
  cross_cloud_config = YAML.parse(response.body).to_ruby
end

check_required(cross_cloud_config, "ERROR: cross-cloud configuration empty/undefined", 1)


# The child pipeline is set for cross-cloud for projects that are on the app layer eg. CoreDNS
# (cross-cloud.yml app_layer: true)
# Kubernetes will set it to false
# Default: false
child_pipeline=false

## GitLab environment settings

## Git the current project related to the pipeline that is running
case ENV["CI_PROJECT_NAME"]
when "cross-cloud", "cross-project"
  target_project_name=ENV["TARGET_PROJECT_NAME"]
  project_build_pipeline_id=ENV["PROJECT_BUILD_PIPELINE_ID"]
  provision_pipeline_id=ENV["PROVISION_PIPELINE_ID"]
  kubernetes_release_type=ENV["KUBERNETES_RELEASE_TYPE"]

  check_required(target_project_name, "ERROR: target project name required -- not available from TARGET_PROJECT_NAME", 1)
  check_required(project_build_pipeline_id, "ERROR: target project build pipeline id required -- not available from env PROJECT_BUILD_PIPELINE_ID", 1)

  if ENV["CI_PROJECT_NAME"] == "cross-cloud"
    app_layer=cross_cloud_config["projects"][target_project_name.downcase]["app_layer"]

    pp "app_layer: #{app_layer}"

    if app_layer and app_layer == "true"
      child_pipeline=true
    else
      # Eg. Kubernetes or CNI
      child_pipeline=false
    end
  elsif ENV["CI_PROJECT_NAME"] == "cross-project"
    child_pipeline=false
    check_required(provision_pipeline_id, "ERROR: provision pipeline id required -- not available from env PROVISION_PIPELINE_ID", 1)
    check_required(kubernetes_release_type, "ERROR: kubernetes release type required -- not available from env KUBERNETES_RELEASE_TYPE", 1)
  end
else
  child_pipeline=false
  target_project_name=ENV["CI_PROJECT_NAME"]
  project_build_pipeline_id=ENV["CI_PIPELINE_ID"]
  check_required(target_project_name, "ERROR: target project name required -- not available from CI_PROJECT_NAME", 1)
end

puts "Project build pipeline id: #{project_build_pipeline_id}"
puts "#103"
puts "ENV['PIPELINE_RELEASE_TYPE']: #{ENV['PIPELINE_RELEASE_TYPE']}"

pipeline_release_type = ENV["PIPELINE_RELEASE_TYPE"] 

unless pipeline_release_type do
  # Set stable and head ref based on project name
  stable_ref=cross_cloud_config["projects"][target_project_name.downcase]["stable_ref"]
  head_ref=cross_cloud_config["projects"][target_project_name.downcase]["head_ref"]

  check_required(stable_ref, "ERROR: stable ref not set for project #{target_project_name}", 1)
  check_required(head_ref, "ERROR: head ref not set for project #{target_project_name}", 1)

  if ENV["TARGET_PROJECT_COMMIT_REF_NAME"].nil?
    target_project_commit_ref_name=ENV["CI_COMMIT_REF_NAME"]
  else
    target_project_commit_ref_name=ENV["TARGET_PROJECT_COMMIT_REF_NAME"]
  end

  case target_project_commit_ref_name
  when head_ref
    pipeline_release_type="head"
  when stable_ref
    pipeline_release_type="stable"
  else
    puts "WARNING: release type unknown ('#{ENV['TARGET_PROJECT_COMMIT_REF_NAME']}') -- skipping update and exiting"
    pipeline_release_type="unknown"
    exit 0
  end
end

puts "Running update_dashboard for job #{ENV['CI_JOB_NAME']} for release type #{pipeline_release_type}" if ENV['CI_JOB_NAME']

# Set DEFAULT_DASHBOARD_API_HOST_PORT in environment (eg. testdashboard.vu.lk:90292 )

dashboard_api_host_port=nil

# If the Dashboard host and port is set then use that
if not ENV["DASHBOARD_API_HOST_PORT"].nil?
  dashboard_api_host_port=ENV["DASHBOARD_API_HOST_PORT"]

# Else use the default API host (if it is set)
elsif ENV["BASE_URL"] == "https://gitlab.staging.cncf.ci" and not ENV["STAGING_DASHBOARD_API_HOST_PORT"].nil?
  dashboard_api_host_port=ENV["STAGING_DASHBOARD_API_HOST_PORT"] 
elsif ENV["BASE_URL"] == "https://gitlab.cncf.ci" and not ENV["PRODUCTION_DASHBOARD_API_HOST_PORT"].nil?
  dashboard_api_host_port=ENV["PRODUCTION_DASHBOARD_API_HOST_PORT"]
else
  dashboard_api_host_port=ENV["DEFAULT_DASHBOARD_API_HOST_PORT"] unless ENV["DEFAULT_DASHBOARD_API_HOST_PORT"].nil?
end

check_required(dashboard_api_host_port, "Set DASHBOARD_API_HOST_PORT / DEFAULT_DASHBOARD_API_HOST_PORT environment setting", 1)

puts "Using Dashboard API server #{dashboard_api_host_port}"

# CI_PROJECT_ID=9
# CI_PIPELINE_ID=3359
# PIPELINE_RELEASE_TYPE="head"
# CI_JOB_ID="34062"

source_project_id = ENV["CI_PROJECT_ID"]
source_pipeline_id = ENV["CI_PIPELINE_ID"]
pipeline_release_type = ENV["PIPELINE_RELEASE_TYPE"] if pipeline_release_type.nil? and not ENV["PIPELINE_RELEASE_TYPE"].nil?
source_pipeline_job_id = ENV["CI_JOB_ID"]

target_cloud=ENV["CLOUD"]
machine_arch = ENV["ARCH"]

check_required(source_project_id, "Set CI_PROJECT_ID environment setting", 1)
check_required(source_pipeline_id,"Set CI_PIPELINE_ID environment setting", 1)
check_required(pipeline_release_type, "Set PIPELINE_RELEASE_TYPE environment setting", 1)
check_required(source_pipeline_job_id, "Set CI_JOB_ID environment setting", 1)
check_required(target_cloud, "Set CLOUD environment setting", 1)

# If protocol not set, default to https, otherwise use what's passed
# NOTE: To use HTTP use `export DASHBOARD_API_HOST_PORT=http://apihost`
uri = URI.parse(dashboard_api_host_port)
case uri.scheme
when 'https','http'
  puts "NOTE: Using scheme #{uri.scheme} from #{dashboard_api_host_port}"
  uristart=""
else
  puts "Using https with #{dashboard_api_host_port}"
  uristart='https://'
end

dashboard_api_url="#{uristart}#{dashboard_api_host_port}/api/source_key_project_monitor"

puts "Project build pipeline id: #{project_build_pipeline_id}"

json_data=<<-EOD
{
  "source_key_project_monitor":
    {
      "source_project_id":"#{source_project_id}",
      "source_pipeline_id":"#{source_pipeline_id}",
      "source_pipeline_job_id":"#{source_pipeline_job_id}",
      "pipeline_release_type":"#{pipeline_release_type}",
      "project_build_pipeline_id":"#{project_build_pipeline_id}",
      "target_project_name":"#{target_project_name}",
      "child_pipeline":"#{child_pipeline}",
      "provision_pipeline_id":"#{provision_pipeline_id}",
      "kubernetes_release_type":"#{kubernetes_release_type}",
      "arch":"#{machine_arch}",
      "cloud":"#{target_cloud}"
    }
}
EOD

puts "json_data: #{json_data}"

def jwt(token)
  JWT.encode(jwt_claims(token), ENV['JWT_KEY'], 'HS256')
end

def jwt_claims(token)
  jwt_issuer=ENV["JWT_ISSUER"]
  {
    iss: jwt_issuer,
  }
end

def jwt_disabled?
  return false if ENV["JWT_DISABLED"].nil?

  if ENV["JWT_DISABLED"].to_i == 1
    return true
  else
    return false
  end
end

retries=5

# TODO: Refactor to use Faraday retry http://www.rubydoc.info/github/lostisland/faraday/Faraday/Request/Retry

begin
  cidashboard = Faraday.new(:url => dashboard_api_url)

  if jwt_disabled?
    puts "JWT disabled"
    cidashboard.post do |req|
      req.headers['Content-Type'] = 'application/json'
      req.body = json_data
    end
  else
    puts "JWT enabled"
    encoded_token = Base64.urlsafe_encode64(SecureRandom.random_bytes(32))
    token = jwt(encoded_token)
    cidashboard.post do |req|
      req.headers['Content-Type'] = 'application/json'
      req.headers['Authorization'] = "Bearer #{token}"
      req.body = json_data
    end
  end
rescue Faraday::ConnectionFailed => e
  if retries > 0
    puts "ERROR: API server #{dashboard_api_host_port} not responding -- #{e}"
    puts "-------------"
    puts "#{e.backtrace}"
    puts "-------------"
    puts "       trying #{retries} more times"
    retries -= 1
    sleep 2
    retry
  end
  puts "ERROR: API server #{dashboard_api_host_port} still not responding -- exiting"
  exit 1
end
