#!/usr/bin/env ruby

#########################################
#
# Usage:
# ./update_client
#
# Example:
#
#   .env ; CI_PROJECT_ID=9 CI_PIPELINE_ID=3359 PIPELINE_RELEASE_TYPE=head CI_JOB_ID=34062 ./update_dashboard
#########################################

require 'json'
require 'faraday'
require 'base64'
require 'securerandom'
require 'jwt'
require 'pp'

dashboard_api_host_port = nil
source_project_id = nil
source_pipeline_id = nil
pipeline_release_type = nil
source_pipeline_job_id = nil

## GitLab
case ENV["CI_COMMIT_REF_NAME"]
when ENV["DASHBOARD_HEAD_REF_NAME"]
   pipeline_release_type="head"
when ENV["DASHBOARD_STABLE_REF_NAME"]
   pipeline_release_type="stable"
else
   pipeline_release_type="unknown"
end

puts "Running update_dashboard for job #{ENV['CI_JOB_NAME']}" if ENV['CI_JOB_NAME']

# Set DEFAULT_DASHBOARD_API_HOST_PORT in environment (eg. testdashboard.vu.lk:90292 )
#

dashboard_api_host_port=nil

# If the Dashboard host and port is set then use that
if not ENV["DASHBOARD_API_HOST_PORT"].nil?
  dashboard_api_host_port=ENV["DASHBOARD_API_HOST_PORT"]

# Else check for users api hosts settings
elsif ENV["DASHBOARD_API_HOST_PORT"].nil? and not ENV["GITLAB_USER_EMAIL"].nil?
  if File.exists?('dev_users.rb')
    require_relative 'dev_users.rb'
    dashboard_api_host_port = load_users_api_host_port
  end

end

# Else use the default API host (if it is set)
if dashboard_api_host_port.nil?
  dashboard_api_host_port=ENV["DEFAULT_DASHBOARD_API_HOST_PORT"] unless ENV["DEFAULT_DASHBOARD_API_HOST_PORT"].nil?
end

def check_required(var, msg, exitstatus)
  if var.nil?
    puts msg
    exit exitstatus unless exitstatus.nil?
  end
end

# CI_PROJECT_ID=9
# CI_PIPELINE_ID=3359
# PIPELINE_RELEASE_TYPE="head"
# CI_JOB_ID="34062"

source_project_id = ENV["CI_PROJECT_ID"]
source_pipeline_id = ENV["CI_PIPELINE_ID"]
pipeline_release_type = ENV["PIPELINE_RELEASE_TYPE"] if pipeline_release_type.nil? and not ENV["PIPELINE_RELEASE_TYPE"].nil?
source_pipeline_job_id = ENV["CI_JOB_ID"]

check_required(dashboard_api_host_port, "Set DASHBOARD_API_HOST_PORT / DEFAULT_DASHBOARD_API_HOST_PORT environment setting", 1)
check_required(source_project_id, "Set CI_PROJECT_ID environment setting", 1)
check_required(source_pipeline_id,"Set CI_PIPELINE_ID environment setting", 1)
check_required(pipeline_release_type, "Set PIPELINE_RELEASE_TYPE environment setting", 1)
check_required(source_pipeline_job_id, "Set CI_JOB_ID environment setting", 1)

dashboard_api_url="http://#{dashboard_api_host_port}/api/source_key_project_monitor"

json_data=<<-EOD
{
  "source_key_project_monitor":
    {
      "source_project_id":"#{source_project_id}",
      "source_pipeline_id":"#{source_pipeline_id}",
      "pipeline_release_type":"#{pipeline_release_type}",
      "source_pipeline_job_id":"#{source_pipeline_job_id}"
    }
}
EOD


def jwt(token)
	JWT.encode(jwt_claims(token), ENV['JWT_KEY'], 'HS256')
end


def jwt_claims(token)
	jwt_issuer=ENV["JWT_ISSUER"]
	{
		iss: jwt_issuer,
	}
end

def enable_jwt?
  return false if ENV["ENABLE_JWT"].nil?

  ENV["ENABLE_JWT"] == 1 ?  true : false
end

cidashboard = Faraday.new(:url => dashboard_api_url)

if enable_jwt?
  puts "JWT enabled"
  encoded_token = Base64.urlsafe_encode64(SecureRandom.random_bytes(32))
	token = jwt(encoded_token)
	cidashboard.post do |req|
		req.headers['Content-Type'] = 'application/json'
    req.headers['Authorization'] = "Bearer #{token}"
		req.body = json_data
	end

else
  puts "JWT disabled"
	cidashboard.post do |req|
		req.headers['Content-Type'] = 'application/json'
		req.body = json_data
	end
end
